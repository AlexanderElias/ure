{
  "version": 3,
  "sources": ["../src/define.ts", "../src/display.ts", "../src/mark.ts", "../src/poly.ts", "../src/html.ts", "../src/render.ts", "../src/context.ts", "../src/dash.ts", "../src/events.ts", "../src/component.ts", "../src/router.ts", "../src/index.ts"],
  "sourcesContent": ["\nexport default function define (name: string, constructor: CustomElementConstructor) {\n    if (!customElements.get(name)) {\n        customElements.define(name, constructor);\n    }\n}", "\nexport default function display (data: any): string {\n    switch (typeof data) {\n        case 'undefined':\n            return '';\n        case 'string':\n            return data;\n        case 'number':\n            return `${data}`;\n        case 'bigint':\n            return `${data}`;\n        case 'boolean':\n            return `${data}`;\n        case 'function':\n            return `${data()}`;\n        case 'symbol':\n            return String(data);\n        case 'object':\n            return JSON.stringify(data);\n        default:\n            throw new Error('XElement - display type not handled');\n    }\n}\n", "\nexport default () => Math.floor(Math.random() * Date.now());", "\nexport const replaceChildren = function (element: Element | Document | DocumentFragment, ...nodes: (Node | string)[]): void {\n\n    while (element.lastChild) {\n        element.removeChild(element.lastChild);\n\n    }\n\n    if (nodes?.length) {\n        for (const node of nodes) {\n            element.appendChild(\n                typeof node === 'string' ?\n                    (element.ownerDocument as Document).createTextNode(node) :\n                    node\n            );\n        }\n    }\n\n};\n\nexport const includes = function (item: string | Array<any>, search: any) {\n    return item.indexOf(search) !== -1;\n};\n\nconst policy = 'trustedTypes' in window ? (window as any).trustedTypes.createPolicy('x-element', { createHTML: (data: string) => data }) : null;\nexport const createHTML = function (data: string) {\n    if (policy) {\n        return policy.createHTML(data);\n    } else {\n        return data;\n    }\n};\n\nexport const hasOwn = function (object: any, key: any) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n};", "import mark from './mark';\nimport { createHTML } from './poly';\nimport { Expressions, HTML } from './types';\n// import parse from './parse';\n\nexport const symbol = Symbol('html');\nconst cache: WeakMap<TemplateStringsArray, [ HTMLTemplateElement, string ]> = new WeakMap();\n\nexport default function html (strings: TemplateStringsArray, ...expressions: Expressions): HTML {\n    const value = cache.get(strings);\n    if (value) {\n        const [ template, marker ] = value;\n\n        return { strings, template, expressions, symbol, marker };\n    } else {\n        const marker = `X-${mark()}-X`;\n\n        let data = '';\n\n        const length = strings.length - 1;\n\n        for (let index = 0; index < length; index++) {\n            data += `${strings[ index ]}${marker}`;\n        }\n\n        data += strings[ length ];\n\n        const template = document.createElement('template');\n        template.innerHTML = createHTML(data);\n\n        cache.set(strings, [ template, marker ]);\n\n        return { strings, template, expressions, symbol, marker };\n    }\n}\n", "import display from './display';\nimport { symbol } from './html';\nimport { includes } from './poly';\nimport { Actions } from './types';\n\nconst filter = NodeFilter.SHOW_ELEMENT + NodeFilter.SHOW_TEXT;\n\nconst links = [ 'src', 'href', 'xlink:href' ];\nconst safePattern = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i;\n\nconst dangerousLink = function (data: string) {\n    if (data === '') return false;\n    if (typeof data !== 'string') return false;\n    return safePattern.test(data) ? false : true;\n};\n\nconst removeBetween = function (start: Node, end: Node) {\n    let node = end.previousSibling;\n    while (node !== start) {\n        node?.parentNode?.removeChild(node);\n        node = end.previousSibling;\n    }\n};\n\nconst ElementAction = function (this: {\n    start: Text;\n    end: Text;\n    actions: Actions;\n}, source: any, target: any) {\n\n    if (target?.symbol === symbol) {\n\n        source = source ?? {};\n        target = target ?? {};\n\n        if (source.strings === target.strings) {\n\n            const l = this.actions.length;\n            for (let i = 0; i < l; i++) {\n                this.actions[ i ](source.expressions[ i ], target.expressions[ i ]);\n            }\n\n        } else {\n            const fragment = target.template.content.cloneNode(true);\n            Render(fragment, this.actions, target.marker);\n\n            const l = this.actions.length;\n            for (let i = 0; i < l; i++) {\n                this.actions[ i ](source.expressions?.[ i ], target.expressions[ i ]);\n            }\n\n            document.adoptNode(fragment);\n\n            removeBetween(this.start, this.end);\n            this.end.parentNode?.insertBefore(fragment, this.end);\n        }\n\n    } else if (target?.constructor === Array) {\n\n        source = source ?? [];\n        target = target ?? [];\n\n        const oldLength = source.length;\n        const newLength = target.length;\n        const common = Math.min(oldLength, newLength);\n\n        for (let i = 0; i < common; i++) {\n            this.actions[ i ](source[ i ], target[ i ]);\n        }\n\n        if (oldLength < newLength) {\n            const template = document.createElement('template');\n\n            for (let i = oldLength; i < newLength; i++) {\n\n                const startChild = document.createTextNode('');\n                const endChild = document.createTextNode('');\n                const action = ElementAction.bind({\n                    start: startChild,\n                    end: endChild,\n                    actions: []\n                });\n\n                template.content.appendChild(startChild);\n                template.content.appendChild(endChild);\n\n                this.actions.push(action);\n                action(source[ i ], target[ i ]);\n            }\n\n            this.end.parentNode?.insertBefore(template.content, this.end);\n        } else if (oldLength > newLength) {\n\n            for (let i = oldLength - 1; i > newLength - 1; i--) {\n                if (source[ i ]?.symbol === symbol) {\n                    const { template } = source[ i ];\n                    let removes = template.content.childNodes.length + 2;\n                    while (removes--) this.end.parentNode?.removeChild(this.end.previousSibling as Node);\n                } else {\n                    this.end.parentNode?.removeChild(this.end.previousSibling as Node);\n                    this.end.parentNode?.removeChild(this.end.previousSibling as Node);\n                    this.end.parentNode?.removeChild(this.end.previousSibling as Node);\n                }\n            }\n\n            this.actions.length = newLength;\n        }\n\n    } else {\n        if (source === target) return;\n\n        while (this.end.previousSibling !== this.start) {\n            this.end.parentNode?.removeChild(this.end.previousSibling as ChildNode);\n        }\n\n        let node;\n        if (this.end.previousSibling === this.start) {\n            node = document.createTextNode(target);\n            this.end.parentNode?.insertBefore(node, this.end);\n        } else {\n            if (this.end.previousSibling.nodeType === Node.TEXT_NODE) {\n                node = this.end.previousSibling;\n                node.textContent = target;\n            } else {\n                node = document.createTextNode(target);\n                this.end.parentNode?.removeChild(this.end.previousSibling as ChildNode);\n                this.end.parentNode?.insertBefore(node, this.end);\n            }\n        }\n\n    }\n\n};\n\nconst AttributeNameAction = function (this: {\n    previousName?: string,\n    previous?: Element,\n    element: Element,\n    name: string,\n    value: any,\n}, source: any, target: any) {\n    if (source === target && this.previous === this.element) return;\n\n    this.previous = this.element;\n\n    this.previousName = source;\n\n    Reflect.set(this.element, source, undefined);\n    this.element.removeAttribute(source);\n    this.name = target?.toLowerCase();\n\n    if (this.name) {\n        this.element.setAttribute(this.name, '');\n    }\n\n};\n\nconst AttributeValueAction = function (this: {\n    previousName?: string,\n    previous?: Element;\n    element: Element,\n    name: string,\n    value: any,\n}, source: any, target: any) {\n    if (source === target && this.previous === this.element) return;\n\n    this.previous = this.element;\n\n    if (\n        this.name === 'value'\n    ) {\n        this.value = display(target);\n        if (!this.name) return;\n        Reflect.set(this.element, this.name, this.value);\n        this.element.setAttribute(this.name, this.value);\n    } else if (\n        this.name.startsWith('on')\n    ) {\n\n        if (typeof source === 'function') {\n            this.element.removeEventListener(this.name.slice(2), source);\n            if (this.previousName) this.element.removeEventListener(this.previousName?.slice(2), source);\n        }\n\n        this.value = target;\n        if (typeof this.value !== 'function') return console.warn(`XElement - attribute name \"${this.name}\" and value \"${this.value}\" not allowed`);\n\n        if (!this.name) return;\n\n        this.element.addEventListener(this.name.slice(2), this.value);\n    } else if (\n        includes(links, this.name)\n    ) {\n        this.value = encodeURI(target);\n\n        if (!this.name) return;\n\n        if (dangerousLink(this.value)) {\n            this.element.removeAttribute(this.name);\n            console.warn(`XElement - attribute name \"${this.name}\" and value \"${this.value}\" not allowed`);\n            return;\n        }\n\n        Reflect.set(this.element, this.name, this.value);\n        this.element.setAttribute(this.name, this.value);\n    } else {\n        this.value = target;\n        if (!this.name) return;\n        Reflect.set(this.element, this.name, this.value);\n        this.element.setAttribute(this.name, this.value);\n    }\n};\n\nconst TagAction = function (this: {\n    element: Element,\n}, source: any, target: any) {\n    if (source === target) return;\n\n    const oldElement = this.element;\n    const newElement = document.createElement(target) as Element;\n\n    while (oldElement.firstChild) newElement.appendChild(oldElement.firstChild);\n\n    const attributeNames = oldElement.getAttributeNames();\n    for (const attributeName of attributeNames) {\n        const attributeValue = oldElement.getAttribute(attributeName) ?? '';\n        newElement.setAttribute(attributeName, attributeValue);\n    }\n\n    oldElement.parentNode?.replaceChild(newElement, oldElement);\n\n    this.element = newElement;\n\n};\n\nexport const Render = function (fragment: DocumentFragment, actions: Actions, marker: string) {\n    const holders = new WeakSet();\n    const walker = document.createTreeWalker(document, filter, null);\n\n    walker.currentNode = fragment;\n\n    let node: Node | null = fragment.firstChild;\n\n    while (node = walker.nextNode()) {\n\n        if (holders.has(node.previousSibling as Node)) {\n            holders.delete(node.previousSibling as Node);\n            actions.push(() => undefined);\n        }\n\n        if (node.nodeType === Node.TEXT_NODE) {\n\n            const startIndex = node.nodeValue?.indexOf(marker) ?? -1;\n            if (startIndex === -1) continue;\n\n            if (startIndex !== 0) {\n                (node as Text).splitText(startIndex);\n                node = walker.nextNode() as Node;\n            }\n\n            const endIndex = marker.length;\n            if (endIndex !== node.nodeValue?.length) {\n                (node as Text).splitText(endIndex);\n            }\n\n            const start = document.createTextNode('');\n            const end = node as Text;\n\n            end.textContent = '';\n            end.parentNode?.insertBefore(start, end);\n\n            actions.push(ElementAction.bind({ marker, start, end, actions: [], }));\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n\n            if (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE') {\n                walker.nextSibling();\n            }\n\n            const tMeta = { element: node as Element };\n\n            if (node.nodeName === marker) {\n                holders.add(node);\n                actions.push(TagAction.bind(tMeta));\n            }\n\n            const names = (node as Element).getAttributeNames();\n            for (const name of names) {\n                const value = (node as Element).getAttribute(name) ?? '';\n                const dynamicName = (name.toUpperCase()).includes(marker);\n                const dynamicValue = value.includes(marker);\n\n                if (dynamicName || dynamicValue) {\n\n                    const aMeta = {\n                        name,\n                        value,\n                        previous: undefined,\n                        get element () {\n                            return tMeta.element;\n                        },\n                    };\n\n                    if (dynamicName) {\n                        (node as Element).removeAttribute(name);\n                        actions.push(AttributeNameAction.bind(aMeta));\n                    }\n\n                    if (dynamicValue) {\n                        (node as Element).removeAttribute(name);\n                        actions.push(AttributeValueAction.bind(aMeta));\n                    }\n\n                } else {\n                    if (includes(links, name)) {\n                        if (dangerousLink(value)) {\n                            (node as Element).removeAttribute(name);\n                            console.warn(`XElement - attribute name \"${name}\" and value \"${value}\" not allowed`);\n                        }\n                    } else if (name.startsWith('on')) {\n                        (node as Element).removeAttribute(name);\n                        console.warn(`XElement - attribute name \"${name}\" not allowed`);\n                    }\n                }\n            }\n        } else {\n            console.warn(`XElement - node type \"${node.nodeType}\" not handled`);\n        }\n    }\n};\n\nexport default Render;\n", "type ContextValue = any;\ntype ContextTarget = any;\ntype ContextReceiver = any;\ntype ContextMethod = () => void;\ntype ContextKey = symbol | string;\ntype ContextData = Record<string, any>;\n\n// const ContextApply = function (target: ContextTarget, receiver: ContextReceiver, args: any[]) {\n//     return Reflect.apply(target, receiver, args);\n// };\n\nconst ContextSet = function (method: ContextMethod, target: ContextTarget, key: ContextKey, value: ContextValue, receiver: ContextReceiver) {\n    if (typeof key === 'symbol') return Reflect.set(target, key, value, receiver);\n\n    const from = Reflect.get(target, key, receiver);\n\n    if (from === value) return true;\n    if (Number.isNaN(from) && Number.isNaN(value)) return true;\n\n    Reflect.set(target, key, value, receiver);\n\n    method();\n\n    return true;\n};\n\nconst ContextGet = function (method: ContextMethod, target: ContextTarget, key: ContextKey, receiver: ContextReceiver): ContextValue {\n    if (typeof key === 'symbol') return Reflect.get(target, key, receiver);\n\n    const value = Reflect.get(target, key, receiver);\n\n    if (value?.constructor?.name === 'Object' || value?.constructor?.name === 'Array') {\n        return new Proxy(value, {\n            get: ContextGet.bind(null, method),\n            set: ContextSet.bind(null, method),\n            deleteProperty: ContextDelete.bind(null, method),\n        });\n    }\n\n    if (value?.constructor?.name === 'Function' || value?.constructor?.name === 'AsyncFunction') {\n        return new Proxy(value, {\n            apply: (t, _, a) => Reflect.apply(t, receiver, a)\n        });\n    }\n\n    return value;\n};\n\nconst ContextDelete = function (method: ContextMethod, target: ContextTarget, key: ContextKey) {\n    if (typeof key === 'symbol') return Reflect.deleteProperty(target, key);\n\n    Reflect.deleteProperty(target, key);\n\n    method();\n\n    return true;\n};\n\nconst Context = function (data: ContextData, method: ContextMethod): Record<any, any> {\n    return new Proxy(data, {\n        get: ContextGet.bind(null, method),\n        set: ContextSet.bind(null, method),\n        deleteProperty: ContextDelete.bind(null, method),\n    });\n};\n\nexport default Context;\n", "\nexport default function dash (data: string): string {\n    data = data.replace(/([a-zA-Z])([A-Z])/g, '$1-$2');\n    data = data.toLowerCase();\n    data = data.includes('-') ? data : `x-${data}`;\n    return data;\n}\n", "\nexport const adoptedEvent = new Event('adopted');\nexport const adoptingEvent = new Event('adopting');\n\nexport const upgradedEvent = new Event('upgraded');\nexport const upgradingEvent = new Event('upgrading');\n\nexport const creatingEvent = new Event('creating');\nexport const createdEvent = new Event('created');\n\nexport const renderingEvent = new Event('rendering');\nexport const renderedEvent = new Event('rendered');\n\nexport const connectedEvent = new Event('connected');\nexport const connectingEvent = new Event('connecting');\n\nexport const attributedEvent = new Event('attributed');\nexport const attributingEvent = new Event('attributing');\n\nexport const disconnectedEvent = new Event('disconnected');\nexport const disconnectingEvent = new Event('disconnecting');\n", "import define from './define';\nimport render from './render';\nimport context from './context';\nimport html from './html';\nimport dash from './dash';\n\nimport {\n    HTML,\n    Actions,\n    Expressions,\n} from './types';\n\nimport {\n    createdEvent,\n    creatingEvent,\n\n    renderedEvent,\n    renderingEvent,\n\n    adoptedEvent,\n    adoptingEvent,\n\n    connectedEvent,\n    connectingEvent,\n\n    attributedEvent,\n    attributingEvent,\n\n    disconnectedEvent,\n    disconnectingEvent,\n} from './events';\n\nconst changeSymbol = Symbol('change');\n\nexport default class Component extends HTMLElement {\n\n    static html = html;\n\n    static define (tag: string = this.tag ?? this.name) {\n        tag = dash(tag);\n        define(tag, this);\n        return this;\n    }\n\n    static async create (tag: string = this.tag ?? this.name) {\n        tag = dash(tag);\n        define(tag, this);\n        const instance = document.createElement(tag);\n        await (instance as Component)[ changeSymbol ];\n        return instance;\n    }\n\n    declare static tag?: string;\n    declare static shadow?: boolean;\n    declare static mode?: 'open' | 'closed';\n    declare static observedProperties?: Array<string>;\n\n    // declare setup?: (context: Record<any, any>) => void | Promise<void>;\n    declare render?: (context: Record<any, any>) => HTML | Promise<HTML>;\n\n    declare created?: (context: Record<any, any>) => void | Promise<void>;\n    declare rendered?: (context: Record<any, any>) => void | Promise<void>;\n    declare connected?: (context: Record<any, any>) => void | Promise<void>;\n    declare adopted?: (context: Record<any, any>) => void | Promise<void>;\n    declare disconnected?: (context: Record<any, any>) => void | Promise<void>;\n    declare attribute?: (name: string, oldValue: string, newValue: string) => void | Promise<void>;\n\n    #isCreatingOrCreated: boolean = false;\n\n    #context: Record<any, any> = {};\n    #root: Element | ShadowRoot;\n\n    #marker: string = '';\n    #actions: Actions = [];\n    #expressions: Expressions = [];\n\n    #changeNext: (() => Promise<any>) | undefined = undefined;\n    [ changeSymbol ]: Promise<any> | undefined = undefined;\n\n    constructor () {\n        super();\n\n        const constructor = this.constructor as typeof Component;\n        const shadow = constructor.shadow;\n        if (shadow && !this.shadowRoot) {\n            const mode = constructor.mode || 'open';\n            this.attachShadow({ mode });\n        }\n\n        this.#root = this.shadowRoot ?? this;\n\n        // this.#changeCurrent = Promise.resolve().then(() => this.#setup());\n    }\n\n    async attributeChangedCallback (name: string, oldValue: string, newValue: string) {\n        this.dispatchEvent(attributingEvent);\n        await this.attribute?.(name, oldValue, newValue)?.catch(console.error);\n        this.dispatchEvent(attributedEvent);\n    }\n\n    async adoptedCallback () {\n        this.dispatchEvent(adoptingEvent);\n        await this.adopted?.(this.#context)?.catch(console.error);\n        this.dispatchEvent(adoptedEvent);\n    }\n\n    async connectedCallback () {\n\n        if (!this.#isCreatingOrCreated) {\n            this.#isCreatingOrCreated = true;\n            this[ changeSymbol ] = this.#setup();\n            await this[ changeSymbol ];\n        }\n\n        this.dispatchEvent(connectingEvent);\n        await this.connected?.(this.#context)?.catch(console.error);\n        this.dispatchEvent(connectedEvent);\n    }\n\n    async disconnectedCallback () {\n        this.dispatchEvent(disconnectingEvent);\n        await this.disconnected?.(this.#context)?.catch(console.error);\n        this.dispatchEvent(disconnectedEvent);\n    }\n\n    async #change () {\n\n        const change = async () => {\n            this.dispatchEvent(renderingEvent);\n            const template = await this.render?.(this.#context);\n\n            if (template) {\n                for (let index = 0; index < this.#actions.length; index++) {\n                    const newExpression = template.expressions[ index ];\n                    const oldExpression = this.#expressions[ index ];\n\n                    try {\n                        this.#actions[ index ](oldExpression, newExpression);\n                    } catch (error) {\n                        console.error(error);\n                    }\n\n                    this.#expressions[ index ] = template.expressions[ index ];\n                }\n            }\n\n            await this.rendered?.(this.#context);\n            this.dispatchEvent(renderedEvent);\n\n            this[ changeSymbol ] = this.#changeNext?.();\n            this.#changeNext = undefined;\n            await this[ changeSymbol ];\n        };\n\n        if (this[ changeSymbol ]) {\n            this.#changeNext = change;\n        } else {\n            this[ changeSymbol ] = change();\n        }\n\n    }\n\n    async #setup () {\n\n        const constructor = this.constructor as typeof Component;\n        const observedProperties = constructor.observedProperties;\n        const prototype = Object.getPrototypeOf(this);\n\n        const properties = observedProperties ?\n            observedProperties ?? [] :\n            [ ...Object.getOwnPropertyNames(this),\n            ...Object.getOwnPropertyNames(prototype) ];\n\n        for (const property of properties) {\n\n            if (\n                'attributeChangedCallback' === property ||\n                'disconnectedCallback' === property ||\n                'connectedCallback' === property ||\n                'adoptedCallback' === property ||\n                'constructor' === property ||\n                'disconnected' === property ||\n                'attribute' === property ||\n                'connected' === property ||\n                'rendered' === property ||\n                'created' === property ||\n                'adopted' === property ||\n                'render' === property ||\n                'setup' === property\n            ) continue;\n\n            const descriptor = Object.getOwnPropertyDescriptor(this, property) ?? Object.getOwnPropertyDescriptor(prototype, property);\n\n            if (!descriptor) continue;\n            if (!descriptor.configurable) continue;\n\n            if (typeof descriptor.value === 'function') descriptor.value = descriptor.value.bind(this);\n            if (typeof descriptor.get === 'function') descriptor.get = descriptor.get.bind(this);\n            if (typeof descriptor.set === 'function') descriptor.set = descriptor.set.bind(this);\n\n            Object.defineProperty(this.#context, property, descriptor);\n\n            Object.defineProperty(this, property, {\n                enumerable: descriptor.enumerable,\n                configurable: false,\n                // configurable: descriptor.configurable,\n                get () {\n                    return (this.#context as Record<any, any>)[ property ];\n                },\n                set (value) {\n                    (this.#context as Record<any, any>)[ property ] = value;\n                    this.#change();\n                }\n            });\n\n        }\n\n        this.#context = context(this.#context, this.#change.bind(this));\n\n        // await this.setup?.(this.#context);\n\n        this.dispatchEvent(renderingEvent);\n\n        const template = await this.render?.(this.#context);\n        if (template) {\n\n            const fragment = template.template.content.cloneNode(true) as DocumentFragment;\n            this.#marker = template.marker;\n            this.#expressions = template.expressions;\n\n            render(fragment, this.#actions, this.#marker);\n\n            for (let index = 0; index < this.#actions.length; index++) {\n                const newExpression = template.expressions[ index ];\n                try {\n                    this.#actions[ index ](undefined, newExpression);\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n\n            document.adoptNode(fragment);\n\n            this.#root.appendChild(fragment);\n        }\n\n        await this.rendered?.(this.#context);\n        this.dispatchEvent(renderedEvent);\n\n        this[ changeSymbol ] = this.#changeNext?.();\n        this.#changeNext = undefined;\n        await this[ changeSymbol ];\n\n        this.dispatchEvent(creatingEvent);\n        await this.created?.(this.#context);\n        this.dispatchEvent(createdEvent);\n    }\n\n}\n", "import { Route, Handler, Module } from './types';\nimport { replaceChildren } from './poly';\nimport component from './component';\nimport define from './define';\nimport dash from './dash';\n\nconst alls: Array<Route> = [];\nconst routes: Array<Route> = [];\n\nconst transition = async function (route: Route) {\n    if (route.instance) {\n        replaceChildren(route.root, route.instance);\n    } else {\n        const result = await route.handler();\n        if ((result as CustomElementConstructor)?.prototype instanceof HTMLElement) {\n            route.construct = result as CustomElementConstructor;\n        } else if (((result as Module)?.default as CustomElementConstructor)?.prototype instanceof HTMLElement) {\n            route.construct = (result as Module).default as CustomElementConstructor;\n        } else {\n            throw new Error('XElement - router handler requires a CustomElementConstructor');\n        }\n\n        if (route.construct.prototype instanceof component) {\n            route.instance = await (route.construct as typeof component).create();\n        } else {\n            route.tag = dash((route.construct as any).tag ?? route.construct.name);\n            define(route.tag, route.construct);\n            route.instance = document.createElement(route.tag);\n        }\n\n        replaceChildren(route.root, route.instance);\n    }\n};\n\nconst navigate = function (event?: any) {\n    if (event && 'canIntercept' in event && event.canIntercept === false) return;\n    if (event && 'canTransition' in event && event.canTransition === false) return;\n\n    const destination = new URL(event?.destination.url ?? location.href);\n    const base = new URL(document.querySelector('base')?.href ?? location.origin);\n\n    base.hash = '';\n    base.search = '';\n    destination.hash = '';\n    destination.search = '';\n\n    const pathname = destination.href.replace(base.href, '/');\n    const transitions: Array<Route> = [];\n\n    for (const route of routes) {\n        if (route.path !== pathname) continue;\n        transitions.push(route);\n    }\n\n    for (const all of alls) {\n        let has = false;\n\n        for (const transition of transitions) {\n            if (transition.root === all.root) {\n                has = true;\n                break;\n            }\n        }\n\n        if (has) continue;\n\n        transitions.push(all);\n    }\n\n    if (event?.intercept) {\n        return event.intercept({ handler: () => transitions.map((route) => transition(route)) });\n    } else if (event?.transitionWhile) {\n        return event.transitionWhile(transitions.map((route) => transition(route)));\n    } else {\n        transitions.map((route) => transition(route));\n    }\n};\n\nconst router = function (path: string, root: Element, handler: Handler) {\n    if (!path) throw new Error('XElement - router path required');\n    if (!handler) throw new Error('XElement - router handler required');\n    if (!root) throw new Error('XElement - router root required');\n\n    if (path === '/*') {\n        for (const all of alls) {\n            if (all.path === path && all.root === root) {\n                throw new Error('XElement - router duplicate path on root');\n            }\n        }\n\n        alls.push({ path, root, handler, });\n    } else {\n        for (const route of routes) {\n            if (route.path === path && route.root === root) {\n                throw new Error('XElement - router duplicate path on root');\n            }\n        }\n\n        routes.push({ path, root, handler, instance: undefined });\n    }\n\n    Reflect.get(window, 'navigation').addEventListener('navigate', navigate);\n};\n\nexport default router;\n", "import Component from './component';\nimport Router from './router';\nimport html from './html';\n\nexport { Component };\nexport { Component as component };\n\nexport { Router };\nexport { Router as router };\n\nexport { html };\n\nexport default {\n\n    Component,\n    component: Component,\n\n    Router,\n    router: Router,\n\n    html,\n\n};\n"],
  "mappings": "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",
  "names": ["_c", "_c", "_c", "_c", "transition"]
}
